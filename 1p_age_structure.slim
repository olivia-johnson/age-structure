initialize() {
	initializeSLiMModelType("nonWF"); // Non Wright-Fisher model
	
	defineConstant("K0", 5000);	// initial carrying capacity
	
	defineConstant("el", 0.7);	// probablility to advabce from larvae to subadult
	
	defineConstant("es", 0.7);	// probablility to advabce from subadult to adult
	
	defineConstant("J",8); // number of linked loci
	
	defineConstant("u", 5e-5); // mutation rate
	
	defineConstant("c", 0.02); // recombination probability among adults and subadults
	
	defineConstant("al", 0.25);
	
	defineConstant("bl", 0.1);
	
	if (!exists("as"))
	{defineConstant("as", 0.1);}
	
	if (!exists("bs"))
	{defineConstant("bs", 0.2);}
	
	defineConstant("age_transitions", c(1.0,el, es, 0.0));
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, J);
	initializeMutationRate(u);
	initializeRecombinationRate(c);
}

// each individual reproduces itself once
reproduction() {
	
	for (x in c(2,3)){
		i_age=individual.age;
		mate = subpop.sampleIndividuals(1, minAge=i_age, maxAge=i_age);
		subpop.addCrossed(individual, mate);
	}
}

2: early() {
	defineGlobal("Z", rnorm(2)); // define Z1 and Z2 current generation
	defineGlobal("Kt2", asInteger(el*es*Kt1)); // define Kt
	defineGlobal("Kt1", asInteger(el*Kt)); // define Kt
	defineGlobal("Kt", asInteger(K0*exp((al*Z[0])+(bl*Z[1])))); // define Kt
	
	for (i in c(1,2,3,4))
	{
		p1.individuals[p1.individuals.age==i].color=colours[i];
	
	}}

1 early(){//draw in single subpopulation
	
	defineGlobal("Z", rnorm(2)); // define Z1 and Z2 current generation
	defineGlobal("Kt2", asInteger(es*el*K0*exp((al*Z[0])+(bl*Z[1])))); // define Kt-2
	defineGlobal("Kt1", asInteger(el*K0*exp((al*Z[0])+(bl*Z[1])))); // define Kt-1
	defineGlobal("Kt", asInteger(K0*exp((al*Z[0])+(bl*Z[1])))); // define Kt
	defineGlobal("N", asInteger(K0+(K0*el)+(K0*el*es)));
	defineGlobal("colours", c(0,"pink", "yellow", "blue", "black")); // define Kt
	
	sim.addSubpop("p1", N, haploid=T);
	
	ages=c(repEach(1, K0), repEach(2, asInteger(K0*el)), repEach(3,asInteger(K0*el*es)));
	
	rAges=sample(ages, N);
	
	p1.individuals.age=rAges;
	
	for (i in c(1,2,3))
	{
		p1.individuals[p1.individuals.age==i].color=colours[i];
	
	}

}


// provide density-dependent selection
early() {
	defineGlobal("K", c(0, Kt, Kt1, Kt2,0));
	
	for (i in 1:length(unique(p1.individuals.age)))
	{
		inds=p1.individuals[p1.individuals.age==i];
		inds.fitnessScaling = K[i] / (length(inds)*age_transitions[i]);
	
	}
}

// output all fixed mutations at end
2000 late() { sim.outputFixedMutations(); }
