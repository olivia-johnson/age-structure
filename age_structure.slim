initialize() {
	initializeSLiMModelType("nonWF"); // Non Wright-Fisher model
	
	defineConstant("K0", 5000);	// initial carrying capacity
	
	defineConstant("el", 0.7);	// probablility to advabce from larvae to subadult
	
	defineConstant("es", 0.7);	// probablility to advabce from subadult to adult
	
	defineConstant("J",8); // number of linked loci
	
	defineConstant("u", 5e-5); // mutation rate
	
	defineConstant("c", 0.02); // recombination probability among adults and subadults
	
	defineConstant("al", 0.25);
	
	defineConstant("bl", 0.1);
	
	if (!exists("as"))
	{defineConstant("as", 0.1);}
	
	if (!exists("bs"))
	{defineConstant("bs", 0.2);}
	
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, J);
	initializeMutationRate(0.0);
	initializeRecombinationRate(0.0);
}

// each individual reproduces itself once
reproduction() {
	subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}

1 early() { // draw values for adult and subadult initial populations
	defineGlobal("Zt_2", rnorm(2)); // define Z1 and Z2 generation t-2
	defineGlobal("Kt2",K0*exp((al*Zt_2[0])+(bl*Zt_2[1]))); // define Kt-2
	defineGlobal("Zt_1", rnorm(2)); // define Z1 and Z2 generation t-1
	defineGlobal("Kt1", K0*exp((al*Zt_1[0])+(bl*Zt_1[1]))); // define Kt-1
	defineGlobal("Z", rnorm(2)); // define Z1 and Z2 current generation
	defineGlobal("Kt", K0*exp((al*Z[0])+(bl*Z[1]))); // define Kt
	
	
	//draw in subpopulations as different age groups 	
	sim.addSubpop("p1", asInteger(round(Kt)), haploid=T); // larve
	sim.addSubpop("p2", asInteger(round(el*Kt1)), haploid=T); // sub adult
	sim.addSubpop("p3", asInteger(round(el*es*Kt2)), haploid=T); // adult
	p1.individuals.color="pink";
	p2.individuals.color="red";
	p3.individuals.color="black";

}
2: early(){ // draw values and calculate carrying capacity for current population
	m_subadult=sample(p1.individuals, asInteger(p1.individualCount*el), weights=p1.individuals.fitnessScaling);
	p2.takeMigrants(m_subadult);
	m_adult=sample(p2.individuals, asInteger(p2.individualCount*es));
	p3.takeMigrants(m_adult);
	
	
	defineGlobal("Kt2",Kt1); // reassign Kt-2
	defineGlobal("Kt1",Kt); // reassign Kt-1
	defineGlobal("Z", rnorm(2)); // define Z1 and Z2 each generation
	defineGlobal("Kt",asInteger(round(K0*exp((al*Z[0])+(bl*Z[1]))))); // define Kt
	//	p1.individuals.color="pink";
	//	p2.individuals.color="red";
	//	p3.individuals.color="black";



}

// provide density-dependent selection
early() {
	p1.fitnessScaling = Kt/p1.individualCount ;
	p2.fitnessScaling = el*Kt1 /p2.individualCount;
	p3.fitnessScaling = el*es*Kt2/p3.individualCount;
}

// output all fixed mutations at end
2000 late() { sim.outputFixedMutations(); }
